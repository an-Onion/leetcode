function isValidSudoku( board: string[][] ): boolean {
    const rows: number[] = Array( 9 ).fill( 0 );
    const cols: number[] = Array( 9 ).fill( 0 );
    const subs: number[][] = Array.from( { length: 3 }, () => Array( 3 ).fill( 0 ) );

    for ( let i = 0; i < 9; i++ ) {
        for ( let j = 0; j < 9; j++ ) {
            const c = board[i][j];
            if ( c === '.' ) continue;
            const offset = 1 << parseInt( c );

            if ( rows[i] & offset ) return false;
            if ( cols[j] & offset ) return false;
            if ( subs[( i / 3 ) | 0][( j / 3 ) | 0] & offset ) return false;
            rows[i] |= offset;
            cols[j] |= offset;
            subs[( i / 3 ) | 0][( j / 3 ) | 0] |= offset;
        }
    }

    return true;
}

describe( '36. Valid Sudoku', () => {
    it( 'case 1', () => {
        expect(
            isValidSudoku( [
                ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
                ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
                ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
                ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
                ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
            ] ),
        ).toBe( true );
    } );

    it( 'case 2', () => {
        expect(
            isValidSudoku( [
                ['8', '3', '.', '.', '7', '.', '.', '.', '.'],
                ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
                ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
                ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
                ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
                ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
            ] ),
        ).toBe( false );
    } );
} );
