function numRookCaptures( board: string[][] ): number {
    let x: number, y: number;

    for ( let i = 0; i < board.length; ++i ) {
        for ( let j = 0; j < board.length; ++j ) {
            if ( board[i][j] !== 'R' ) continue;
            ( x = i ), ( y = j );
        }
    }
    const dirs = [
        [0, -1],
        [0, 1],
        [1, 0],
        [-1, 0],
    ];

    let ret = 0;

    for ( const [r, c] of dirs ) {
        let i = x + r,
            j = y + c;
        while ( i >= 0 && j >= 0 && i < 8 && j < 8 ) {
            if ( board[i][j] === '.' ) {
                ( i += r ), ( j += c );
                continue;
            }
            if ( board[i][j] === 'p' ) {
                ret++;
            }
            break;
        }
    }
    return ret;
}

describe( '999. available-captures-for-rook', () => {
    it( 'case 1', () => {
        const board = [
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', 'p', '.', '.', '.', '.'],
            ['.', '.', '.', 'R', '.', '.', '.', 'p'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', 'p', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
        ];
        expect( numRookCaptures( board ) ).toBe( 3 );
    } );

    it( 'case 2', () => {
        const board = [
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', 'p', 'p', 'p', 'p', 'p', '.', '.'],
            ['.', 'p', 'p', 'B', 'p', 'p', '.', '.'],
            ['.', 'p', 'B', 'R', 'B', 'p', '.', '.'],
            ['.', 'p', 'p', 'B', 'p', 'p', '.', '.'],
            ['.', 'p', 'p', 'p', 'p', 'p', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
        ];
        expect( numRookCaptures( board ) ).toBe( 0 );
    } );

    it( 'case 3', () => {
        const board = [
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', 'p', '.', '.', '.', '.'],
            ['.', '.', '.', 'p', '.', '.', '.', '.'],
            ['p', 'p', '.', 'R', '.', 'p', 'B', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', 'B', '.', '.', '.', '.'],
            ['.', '.', '.', 'p', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
        ];
        expect( numRookCaptures( board ) ).toBe( 3 );
    } );
} );
